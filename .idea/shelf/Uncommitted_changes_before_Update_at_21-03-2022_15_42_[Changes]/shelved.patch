Index: roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/controller/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n *  This file is part of the initial project provided for the\r\n *  course \"Project in Software Development (02362)\" held at\r\n *  DTU Compute at the Technical University of Denmark.\r\n *\r\n *  Copyright (C) 2019, 2020: Ekkart Kindler, ekki@dtu.dk\r\n *\r\n *  This software is free software; you can redistribute it and/or modify\r\n *  it under the terms of the GNU General Public License as published by\r\n *  the Free Software Foundation; version 2 of the License.\r\n *\r\n *  This project is distributed in the hope that it will be useful,\r\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *  GNU General Public License for more details.\r\n *\r\n *  You should have received a copy of the GNU General Public License\r\n *  along with this project; if not, write to the Free Software\r\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\r\n *\r\n */\r\npackage dk.dtu.compute.se.pisd.roborally.controller;\r\n\r\nimport dk.dtu.compute.se.pisd.roborally.model.*;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\n/**\r\n * ...\r\n *\r\n * @author Ekkart Kindler, ekki@dtu.dk\r\n *\r\n */\r\npublic class GameController {\r\n\r\n    final public Board board;\r\n\r\n    public GameController(@NotNull Board board) {\r\n        this.board = board;\r\n    }\r\n\r\n    /**\r\n     * This is just some dummy controller operation to make a simple move to see something\r\n     * happening on the board. This method should eventually be deleted!\r\n     *\r\n     * @param space the space to which the current player should move\r\n     */\r\n    public void moveCurrentPlayerToSpace(@NotNull Space space)  {\r\n        // TODO Assignment V1: method should be implemented by the students:\r\n        //   - the current player should be moved to the given space\r\n        //     (if it is free()\r\n        //   - and the current player should be set to the player\r\n        //     following the current player\r\n        //   - the counter of moves in the game should be increased by one\r\n        //     if and when the player is moved (the counter and the status line\r\n        //     message needs to be implemented at another place)\r\n        Player currentPlayer = board.getCurrentPlayer();\r\n        if(space.getPlayer() == null)\r\n            currentPlayer.setSpace(space);\r\n        else return;\r\n\r\n        int currentPlayerNumber = board.getPlayerNumber(currentPlayer);\r\n        Player nextPlayer = board.getPlayer((currentPlayerNumber + 1) % board.getPlayersNumber());\r\n        board.setCurrentPlayer(nextPlayer);\r\n\r\n\r\n\r\n        board.setCounter(board.getCounter() + 1);\r\n\r\n    }\r\n\r\n\r\n    // XXX: V2\r\n    public void startProgrammingPhase() {\r\n        board.setPhase(Phase.PROGRAMMING);\r\n        board.setCurrentPlayer(board.getPlayer(0));\r\n        board.setStep(0);\r\n\r\n        for (int i = 0; i < board.getPlayersNumber(); i++) {\r\n            Player player = board.getPlayer(i);\r\n            if (player != null) {\r\n                for (int j = 0; j < Player.NO_REGISTERS; j++) {\r\n                    CommandCardField field = player.getProgramField(j);\r\n                    field.setCard(null);\r\n                    field.setVisible(true);\r\n                }\r\n                for (int j = 0; j < Player.NO_CARDS; j++) {\r\n                    CommandCardField field = player.getCardField(j);\r\n                    field.setCard(generateRandomCommandCard());\r\n                    field.setVisible(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // XXX: V2\r\n    private CommandCard generateRandomCommandCard() {\r\n        Command[] commands = Command.values();\r\n        int random = (int) (Math.random() * commands.length);\r\n        return new CommandCard(commands[random]);\r\n    }\r\n\r\n    // XXX: V2\r\n    public void finishProgrammingPhase() {\r\n        makeProgramFieldsInvisible();\r\n        makeProgramFieldsVisible(0);\r\n        board.setPhase(Phase.ACTIVATION);\r\n        board.setCurrentPlayer(board.getPlayer(0));\r\n        board.setStep(0);\r\n    }\r\n\r\n    // XXX: V2\r\n    private void makeProgramFieldsVisible(int register) {\r\n        if (register >= 0 && register < Player.NO_REGISTERS) {\r\n            for (int i = 0; i < board.getPlayersNumber(); i++) {\r\n                Player player = board.getPlayer(i);\r\n                CommandCardField field = player.getProgramField(register);\r\n                field.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    // XXX: V2\r\n    private void makeProgramFieldsInvisible() {\r\n        for (int i = 0; i < board.getPlayersNumber(); i++) {\r\n            Player player = board.getPlayer(i);\r\n            for (int j = 0; j < Player.NO_REGISTERS; j++) {\r\n                CommandCardField field = player.getProgramField(j);\r\n                field.setVisible(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    // XXX: V2\r\n    public void executePrograms() {\r\n        board.setStepMode(false);\r\n        continuePrograms();\r\n    }\r\n\r\n    // XXX: V2\r\n    public void executeStep() {\r\n        board.setStepMode(true);\r\n        continuePrograms();\r\n    }\r\n\r\n    // XXX: V2\r\n    private void continuePrograms() {\r\n        do {\r\n            executeNextStep();\r\n        } while (board.getPhase() == Phase.ACTIVATION && !board.isStepMode());\r\n    }\r\n\r\n    // XXX: V2\r\n    private void executeNextStep() {\r\n        Player currentPlayer = board.getCurrentPlayer();\r\n        if (board.getPhase() == Phase.ACTIVATION && currentPlayer != null) {\r\n            int step = board.getStep();\r\n            if (step >= 0 && step < Player.NO_REGISTERS) {\r\n                CommandCard card = currentPlayer.getProgramField(step).getCard();\r\n                if (card != null) {\r\n                    Command command = card.command;\r\n                    if (command.isInteractive()){\r\n                        board.setPhase(Phase.PLAYER_INTERACTION);\r\n                    }\r\n                    executeCommand(currentPlayer, command);\r\n                }\r\n                int nextPlayerNumber = board.getPlayerNumber(currentPlayer) + 1;\r\n                if (nextPlayerNumber < board.getPlayersNumber()) {\r\n                    board.setCurrentPlayer(board.getPlayer(nextPlayerNumber));\r\n                } else {\r\n                    step++;\r\n                    if (step < Player.NO_REGISTERS) {\r\n                        makeProgramFieldsVisible(step);\r\n                        board.setStep(step);\r\n                        board.setCurrentPlayer(board.getPlayer(0));\r\n                    } else {\r\n                        startProgrammingPhase();\r\n                    }\r\n                }\r\n            } else {\r\n                // this should not happen\r\n                assert false;\r\n            }\r\n        } else {\r\n            // this should not happen\r\n            assert false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    public void executeCommandOptionAndContinue(@NotNull Command option){\r\n        Player currentPlayer = board.getCurrentPlayer();\r\n        if(currentPlayer != null &&\r\n                board.getPhase()== Phase.PLAYER_INTERACTION &&\r\n                option !=null);\r\n        board.setPhase(Phase.ACTIVATION);\r\n        executeCommand(currentPlayer, option);\r\n\r\n        int nextPlayerNumber = board.getPlayerNumber(currentPlayer) + 1;\r\n        if(nextPlayerNumber < board.getPlayersNumber()){\r\n            board.setCurrentPlayer(board.getPlayer(nextPlayerNumber));\r\n        } else {\r\n            int step = board.getStep() + 1;\r\n            if (step < Player.NO_REGISTERS) {\r\n                makeProgramFieldsVisible(step);\r\n                board.setStep(step);\r\n                board.setCurrentPlayer(board.getPlayer(0));\r\n            } else {\r\n                startProgrammingPhase();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // XXX: V2\r\n    private void executeCommand(@NotNull Player player, Command command) {\r\n        if (player != null && player.board == board && command != null) {\r\n            // XXX This is a very simplistic way of dealing with some basic cards and\r\n            //     their execution. This should eventually be done in a more elegant way\r\n            //     (this concerns the way cards are modelled as well as the way they are executed).\r\n\r\n            switch (command) {\r\n                case FORWARD:\r\n                    this.moveForward(player);\r\n                    break;\r\n                case RIGHT:\r\n                    this.turnRight(player);\r\n                    break;\r\n                case LEFT:\r\n                    this.turnLeft(player);\r\n                    break;\r\n                case FAST_FORWARD:\r\n                    this.fastForward(player);\r\n                    break;\r\n                default:\r\n                    // DO NOTHING (for now)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    class ImpossibleMoveException extends Exception {\r\n\r\n        private Player player;\r\n        private Space space;\r\n        private Heading heading;\r\n\r\n        public ImpossibleMoveException(Player player, Space space, Heading heading) {\r\n            super(\"Move impossible\");\r\n            this.player = player;\r\n            this.space = space;\r\n            this.heading = heading;\r\n        }\r\n    }\r\n/*\r\n    // TODO Assignment V2\r\n    public void moveForward(@NotNull Player player) {\r\n        if ( board != null && player != null && player.board == board) {\r\n            Space currentSpace = player.getSpace();\r\n            if (currentSpace != null) {\r\n                Space newSpace = board.getNeighbour(currentSpace,player.getHeading());\r\n                if (newSpace != null && newSpace.getPlayer()== null){\r\n                    player.setSpace(newSpace);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n */\r\n\r\n\r\n    // TODO Assignment V2\r\n    public void moveForward(@NotNull Player player) {\r\n        if (player.board == board) {\r\n            Space space = player.getSpace();\r\n            Heading heading = player.getHeading();\r\n\r\n            Space target = board.getNeighbour(space, heading);\r\n            if(target != null) {\r\n                try {\r\n                    moveToSpace(player,target,heading);\r\n                } catch (ImpossibleMoveException e){\r\n                    // Nothing happens here for now\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    private void moveToSpace(\r\n            @NotNull Player player,\r\n            @NotNull Space space,\r\n            @NotNull Heading heading) throws ImpossibleMoveException {\r\n\r\n        Player other = space.getPlayer();\r\n        if (other !=null) {\r\n            Space target = board.getNeighbour(space, heading);\r\n            if (target != null) {\r\n                moveToSpace(other, target, heading);\r\n            } else  {\r\n                throw new ImpossibleMoveException(player, space, heading);\r\n            }\r\n        }\r\n        player.setSpace(space);\r\n    }\r\n\r\n\r\n\r\n\r\n    // TODO Assignment V2\r\n    public void fastForward(@NotNull Player player) {\r\n        moveForward(player);\r\n        moveForward(player);\r\n    }\r\n\r\n    // TODO Assignment V2\r\n    public void turnRight(@NotNull Player player) {\r\n        if(player !=null && player.board == board){\r\n            player.setHeading(player.getHeading().next());\r\n        }\r\n    }\r\n\r\n    // TODO Assignment V2\r\n    public void turnLeft(@NotNull Player player) {\r\n        if(player !=null && player.board == board){\r\n            player.setHeading(player.getHeading().prev());\r\n        }\r\n    }\r\n\r\n    public boolean moveCards(@NotNull CommandCardField source, @NotNull CommandCardField target) {\r\n        CommandCard sourceCard = source.getCard();\r\n        CommandCard targetCard = target.getCard();\r\n        if (sourceCard != null && targetCard == null) {\r\n            target.setCard(sourceCard);\r\n            source.setCard(null);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A method called when no corresponding controller operation is implemented yet. This\r\n     * should eventually be removed.\r\n     */\r\n    public void notImplemented() {\r\n        // XXX just for now to indicate that the actual method is not yet implemented\r\n        assert false;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/controller/GameController.java b/roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/controller/GameController.java
--- a/roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/controller/GameController.java	(revision 84c8af29adfab686f31f947d2ad21d6c9aa86809)
+++ b/roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/controller/GameController.java	(date 1647873760210)
@@ -243,6 +243,14 @@
     }
 
 
+
+    /**
+     * ...
+     *
+     * @author Oskar Lolk Larsen, s215717
+     *
+     */
+
     class ImpossibleMoveException extends Exception {
 
         private Player player;
@@ -273,6 +281,13 @@
  */
 
 
+    /**
+     * ...
+     *
+     * @author Oskar Lolk Larsen, s215717
+     *
+     */
+
     // TODO Assignment V2
     public void moveForward(@NotNull Player player) {
         if (player.board == board) {
@@ -292,6 +307,14 @@
         }
     }
 
+
+    /**
+     * ...
+     *
+     * @author Oskar Lolk Larsen, s215717
+     *
+     */
+
     private void moveToSpace(
             @NotNull Player player,
             @NotNull Space space,
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e2852cad-b35f-4c1f-9a7e-3f79e569b46e\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/modules.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/modules.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/roborally/roborally.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/roborally/roborally.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/StartRoboRally.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/StartRoboRally.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/controller/GameController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/controller/GameController.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"26hEsRS6OrevVOeuHlhDa5c199y\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n    <option name=\"showMembers\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/roborally\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"StartRoboRally\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"dk.dtu.compute.se.pisd.roborally.StartRoboRally\" />\r\n      <module name=\"roborally\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"dk.dtu.compute.se.pisd.roborally.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.StartRoboRally\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e2852cad-b35f-4c1f-9a7e-3f79e569b46e\" name=\"Changes\" comment=\"\" />\r\n      <created>1647867624288</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1647867624288</updated>\r\n      <workItem from=\"1647867626044\" duration=\"313000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 84c8af29adfab686f31f947d2ad21d6c9aa86809)
+++ b/.idea/workspace.xml	(date 1647871374091)
@@ -4,12 +4,8 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="e2852cad-b35f-4c1f-9a7e-3f79e569b46e" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/.idea/modules.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
+    <list default="true" id="e2852cad-b35f-4c1f-9a7e-3f79e569b46e" name="Changes" comment="skubbe metode implementeret">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/roborally/roborally.iml" beforeDir="false" afterPath="$PROJECT_DIR$/roborally/roborally.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/StartRoboRally.java" beforeDir="false" afterPath="$PROJECT_DIR$/roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/StartRoboRally.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/controller/GameController.java" beforeDir="false" afterPath="$PROJECT_DIR$/roborally/src/main/java/dk/dtu/compute/se/pisd/roborally/controller/GameController.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -62,9 +58,32 @@
       <updated>1647867624288</updated>
       <workItem from="1647867626044" duration="313000" />
     </task>
+    <task id="LOCAL-00001" summary="skubbe metode implementeret">
+      <created>1647870399412</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1647870399412</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="skubbe metode implementeret" />
+    <option name="LAST_COMMIT_MESSAGE" value="skubbe metode implementeret" />
+  </component>
 </project>
\ No newline at end of file
